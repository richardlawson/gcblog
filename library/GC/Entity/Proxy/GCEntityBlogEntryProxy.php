<?php

namespace GC\Entity\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class GCEntityBlogEntryProxy extends \GC\Entity\BlogEntry implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setPostDate(\DateTime $postDate)
    {
        $this->__load();
        return parent::setPostDate($postDate);
    }

    public function getPostDate()
    {
        $this->__load();
        return parent::getPostDate();
    }

    public function setPostDateAsString($stringDate)
    {
        $this->__load();
        return parent::setPostDateAsString($stringDate);
    }

    public function getPostDateAsString()
    {
        $this->__load();
        return parent::getPostDateAsString();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setImage($image)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function setSummary($summary)
    {
        $this->__load();
        return parent::setSummary($summary);
    }

    public function getSummary()
    {
        $this->__load();
        return parent::getSummary();
    }

    public function setContent($content)
    {
        $this->__load();
        return parent::setContent($content);
    }

    public function getContent()
    {
        $this->__load();
        return parent::getContent();
    }

    public function setCategory(\GC\Entity\Category $category)
    {
        $this->__load();
        return parent::setCategory($category);
    }

    public function getCategory()
    {
        $this->__load();
        return parent::getCategory();
    }

    public function addComment(\GC\Entity\Comment $comment)
    {
        $this->__load();
        return parent::addComment($comment);
    }

    public function getComments()
    {
        $this->__load();
        return parent::getComments();
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }

    public function populate(array $options = NULL)
    {
        $this->__load();
        return parent::populate($options);
    }

    public function setOptions(array $options)
    {
        $this->__load();
        return parent::setOptions($options);
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'postDate', 'title', 'image', 'summary', 'content', 'category', 'comments');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}